{
	"name": "df_orders_to_cleansed",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ordersraw",
						"type": "DatasetReference"
					},
					"name": "OrdersRaw"
				},
				{
					"dataset": {
						"referenceName": "orderitems_raw",
						"type": "DatasetReference"
					},
					"name": "OrdersItemsRaw"
				},
				{
					"dataset": {
						"referenceName": "customers_raw",
						"type": "DatasetReference"
					},
					"name": "CustomersRaw"
				},
				{
					"dataset": {
						"referenceName": "products_raw",
						"type": "DatasetReference"
					},
					"name": "ProductsRaw"
				},
				{
					"dataset": {
						"referenceName": "stores_raw",
						"type": "DatasetReference"
					},
					"name": "sourceStores"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "cleansed_orders",
						"type": "DatasetReference"
					},
					"name": "OrdersSink"
				},
				{
					"dataset": {
						"referenceName": "cleansed_order_items",
						"type": "DatasetReference"
					},
					"name": "OrderitemsSink"
				},
				{
					"dataset": {
						"referenceName": "cleansed_customers",
						"type": "DatasetReference"
					},
					"name": "CustomersSink"
				},
				{
					"dataset": {
						"referenceName": "cleansed_products",
						"type": "DatasetReference"
					},
					"name": "sinkProducts"
				},
				{
					"dataset": {
						"referenceName": "cleansed_Stores",
						"type": "DatasetReference"
					},
					"name": "sinkStores"
				}
			],
			"transformations": [
				{
					"name": "OrderDateAndUpdatedTimestamps"
				},
				{
					"name": "CastDataTypesOrders"
				},
				{
					"name": "DropOrderDateTimeandReorder"
				},
				{
					"name": "CastDataTypes"
				},
				{
					"name": "UpdatedTimeStamp"
				},
				{
					"name": "DropLineItemID"
				},
				{
					"name": "CastDataTypesCustomers"
				},
				{
					"name": "UpdatedTimeStampCustomers"
				},
				{
					"name": "castDatatypesProducts"
				},
				{
					"name": "UpdatedtimestampsProducts"
				},
				{
					"name": "castdataTypesStores"
				},
				{
					"name": "DropWebadrressAndReorders"
				},
				{
					"name": "TimeStamp"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrdersRaw",
				"source(output(",
				"          ORDER_ID as string,",
				"          LINE_ITEM_ID as string,",
				"          PRODUCT_ID as string,",
				"          UNIT_PRICE as string,",
				"          QUANTITY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> OrdersItemsRaw",
				"source(output(",
				"          CUSTOMER_ID as short,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> CustomersRaw",
				"source(output(",
				"          PRODUCT_ID as short,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> ProductsRaw",
				"source(output(",
				"          STORE_ID as string,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> sourceStores",
				"OrdersRaw derive(ORDER_DATE = toDate(ORDER_DATETIME, 'dd-MMM-yy HH.mm.ss.SS'),",
				"          UPDATED_TIMESTAMP = currentUTC()) ~> OrderDateAndUpdatedTimestamps",
				"OrderDateAndUpdatedTimestamps cast(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          ORDER_DATE as date,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     errors: true) ~> CastDataTypesOrders",
				"CastDataTypesOrders select(mapColumn(",
				"          ORDER_ID,",
				"          ORDER_DATE,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropOrderDateTimeandReorder",
				"OrdersItemsRaw cast(output(",
				"          ORDER_ID as integer,",
				"          LINE_ITEM_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer",
				"     ),",
				"     errors: true) ~> CastDataTypes",
				"CastDataTypes derive(UPDATED_TIMESTAMP = currentUTC()) ~> UpdatedTimeStamp",
				"UpdatedTimeStamp select(mapColumn(",
				"          ORDER_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropLineItemID",
				"CustomersRaw cast(output(",
				"          CUSTOMER_ID as integer,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string",
				"     ),",
				"     errors: true) ~> CastDataTypesCustomers",
				"CastDataTypesCustomers derive(UPDATED_TIMESTAMP = currentUTC()) ~> UpdatedTimeStampCustomers",
				"ProductsRaw cast(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double",
				"     ),",
				"     errors: true) ~> castDatatypesProducts",
				"castDatatypesProducts derive(UPDATED_PRODUCTS = currentUTC()) ~> UpdatedtimestampsProducts",
				"sourceStores cast(output(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double",
				"     ),",
				"     errors: true) ~> castdataTypesStores",
				"castdataTypesStores select(mapColumn(",
				"          STORE_ID,",
				"          STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropWebadrressAndReorders",
				"DropWebadrressAndReorders derive(UPDATED_TIMESTAMP = currentUTC()) ~> TimeStamp",
				"DropOrderDateTimeandReorder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OrdersSink",
				"DropLineItemID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORDER_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OrderitemsSink",
				"UpdatedTimeStampCustomers sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustomersSink",
				"UpdatedtimestampsProducts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATED_PRODUCTS as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkProducts",
				"TimeStamp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkStores"
			]
		}
	}
}